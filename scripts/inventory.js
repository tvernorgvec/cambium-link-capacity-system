#!/usr/bin/env node

import { readFileSync, writeFileSync } from 'fs';
import { execSync } from 'child_process';
import { join } from 'path';

const generateInventory = () => {
  const timestamp = new Date().toISOString();
  
  // Read package.json
  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
  
  // Get system info
  const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  
  // Quality tools inventory
  const qualityTools = {
    'ESLint': '9.29.0',
    'Prettier': '3.6.1',
    'TypeScript Prune': '0.10.3',
    'JSCPD': '4.0.5',
    'Madge': '8.0.0',
    'Husky': '9.0.11',
    'Lint-Staged': '15.2.10',
    'Commitlint': '19.5.0',
    'Commitizen': '4.3.1',
    'Depcheck': '1.4.7',
    'npm-check-updates': '17.1.10',
    'License Checker': '25.0.1',
    'Audit CI': '7.1.0'
  };
  
  const inventory = {
    timestamp,
    project: {
      name: packageJson.name || 'GVEC Link Capacity',
      version: packageJson.version || '1.0.0',
      description: packageJson.description || 'Link capacity testing application'
    },
    runtime: {
      node: nodeVersion,
      npm: npmVersion
    },
    frontend: {
      framework: 'React 18.2.0',
      language: 'TypeScript/JavaScript',
      styling: 'Tailwind CSS',
      animation: 'Framer Motion',
      routing: 'React Router DOM',
      bundler: 'Vite'
    },
    qualityTools,
    dependencies: {
      production: Object.keys(packageJson.dependencies || {}),
      development: Object.keys(packageJson.devDependencies || {})
    },
    scripts: Object.keys(packageJson.scripts || {}),
    routes: {
      frontend: [
        '/linktest/',
        '/linktest/dashboard',
        '/linktest/scheduler',
        '/linktest/history',
        '/linktest/settings'
      ]
    },
    configurations: [
      'eslint.config.js',
      '.prettierrc',
      '.jscpd.json',
      '.lintstagedrc.json',
      'commitlint.config.js',
      '.czrc',
      'tsconfig.json'
    ]
  };
  
  // Generate markdown report
  const markdown = `# Project Inventory\n\n**Generated:** ${timestamp}\n\n## Project Information\n- **Name:** ${inventory.project.name}\n- **Version:** ${inventory.project.version}\n- **Description:** ${inventory.project.description}\n\n## Runtime Environment\n- **Node.js:** ${inventory.runtime.node}\n- **npm:** ${inventory.runtime.npm}\n\n## Technology Stack\n\n### Frontend\n- **Framework:** ${inventory.frontend.framework}\n- **Language:** ${inventory.frontend.language}\n- **Styling:** ${inventory.frontend.styling}\n- **Animation:** ${inventory.frontend.animation}\n- **Routing:** ${inventory.frontend.routing}\n- **Bundler:** ${inventory.frontend.bundler}\n\n### Quality Tools (${Object.keys(qualityTools).length} tools)\n${Object.entries(qualityTools).map(([tool, version]) => `- **${tool}:** ${version}`).join('\n')}\n\n## Dependencies\n- **Production:** ${inventory.dependencies.production.length} packages\n- **Development:** ${inventory.dependencies.development.length} packages\n\n## Available Scripts\n${inventory.scripts.map(script => `- \`${script}\``).join('\n')}\n\n## Routes\n${inventory.routes.frontend.map(route => `- ${route}`).join('\n')}\n\n## Configuration Files\n${inventory.configurations.map(config => `- ${config}`).join('\n')}\n\n---\n*Auto-generated by inventory script*`;
  
  // Write files
  writeFileSync('docs/INVENTORY.md', markdown);
  writeFileSync('docs/inventory.json', JSON.stringify(inventory, null, 2));
  
  console.log('ðŸ“‹ Project inventory generated:');
  console.log('  - docs/INVENTORY.md');
  console.log('  - docs/inventory.json');
  
  return inventory;
};

if (import.meta.url === `file://${process.argv[1]}`) {
  generateInventory();
}

export { generateInventory };